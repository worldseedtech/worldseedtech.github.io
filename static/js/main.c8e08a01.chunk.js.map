{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5 lazy /^/.*/.entry/.js$/ groupOptions: {} namespace object","../node_modules/ionicons/dist/esm-es5 lazy /^/.*/.entry/.js$/ groupOptions: {} namespace object","cache/world/world-cache.ts","cache/account/account-cache.ts","cache/index.ts","cache/cloud-sync/firebase-synchronizer.ts","hooks/useWallet.ts","components/account/AccountModify.tsx","routes/wallet-routes.ts","pages/WalletPage.tsx","components/account/AccountItem.tsx","routes/account-routes.ts","components/account/AccountDetail.tsx","components/account/AccountList.tsx","components/inventory/InventoryItemButton.tsx","components/inventory/InventoryItemList.tsx","routes/inventory-routes.ts","components/inventory/InventoryItemDetail.tsx","pages/InventoryPage.tsx","pages/SpacePage.tsx","pages/GlobePage.tsx","pages/WorldPage.tsx","pages/WorldsPage.tsx","routes/world-routes.ts","pages/MintPage.tsx","routes/routes.ts","routes/dashboard-route.ts","pages/Home.tsx","config/index.ts","routes/sections.ts","components/discord/DiscordLogin.tsx","components/wallet/ConnectButton.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","useSpaceInfo","composeStore","schema","worldSchema","definition","useInventory","useWorldInfo","useAccount","cache","worldseed","account","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseSynchronizer","reject","getApps","length","initializeApp","namespace","store","db","getFirestore","namespaced_collection","collection","firstRun","onSnapshot","snapShot","cloudRecords","docs","doc","data","reduce","a","b","import","records","setWorkspaceInstance","index","item","status","setDoc","catch","useWallet","create","set","walletAdapters","solflare","getSolflareWallet","sollet","getSolletWallet","torus","getTorusWallet","options","clientId","phantom","getPhantomWallet","ledger","getLedgerWallet","connect","type","wallet","adapter","console","log","address","publicKey","toBase58","balance","on","connection","web3","getAccountInfo","r","String","lamports","LAMPORTS_PER_SOL","undefined","AccountModify","owner","insertAccount","x","insert","retrieveAccount","retrieve","rootSchema","accountSchema","objectSchema","definitions","hiddenFields","onSubmit","validAccount","walletRoute","icon","walletOutline","path","title","component","error","titleColor","headerColor","slot","alias","color","message","expand","fill","onClick","disconnect","exact","walletRoutes","AccountItem","routerLink","destination","accountDetailRoute","personOutline","useParams","center","dynamic","accountListRoute","peopleOutline","accounts","all","accountRoutes","InventoryItemButton","inventoryDetailRoute","uuid","name","InventoryItemList","inventory","description","inventoryListRoute","listOutline","model","inventoryRoutes","Entity3D","entity","gltf","useLoader","GLTFLoader","args","offset","position","object","scene","Scene","entities","DesktopSpaceCanvas","camera","useRef","React","useState","THREE","virtualScene","size","useThree","fbo","useFBO","height","width","useFrame","gl","current","setRenderTarget","render","texture","createPortal","ref","MapControls","enablePan","enableZoom","enableRotate","emptySpace","world","v4","anchor","coordinates","WorldGlobe","worldInfo","spaces","filter","setStatus","newSpace","setNewSpace","worldFeatureCollection","features","geometry","properties","longitude","latitude","toWorldFeatureCollection","push","useHistory","style","labelsData","labelLat","d","labelLng","labelText","labelSize","labelDotRadius","labelColor","labelResolution","labelAltitude","onLabelClick","l","onGlobeRightClick","lat","lng","geohash","geohashForLocation","isOpen","onDismiss","lockedFields","requiredOnly","space_node","validData","WorldPage","worlds","find","space","spaceRoute","WorldsPage","subTitle","worldRoute","mintRoute","setTitle","useTitle","useEffect","starOutline","updateSpace","update","validEntity","transformedEntity","y","z","spaceDraft","zIndex","left","right","join","addOutline","fallback","globeOutline","worldsRoute","worldRoutes","routes","Config","version","darkMode","about","sections","animated","bottomBar","hideNext","end","widget","src","frameBorder","sandbox","showDiscord","setShowDiscord","children","start","settings","disabled","serialization","mode","synchronization","listener","preload","App","insertSpace","insertWorld","telesto_uuid","esperia_uuid","telesto_hq_uuid","characteristics","rotation","scale","config","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"60FAAA,IAAIA,EAAM,CACT,8BAA+B,CAC9B,IACA,GAED,uBAAwB,CACvB,IACA,GAED,uBAAwB,CACvB,IACA,GAED,0BAA2B,CAC1B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,wBAAyB,CACxB,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,sBAAuB,CACtB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mCAAoC,CACnC,IACA,IAED,uBAAwB,CACvB,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,wBAAyB,CACxB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,uBAAwB,CACvB,IACA,GAED,uBAAwB,CACvB,IACA,IAED,yBAA0B,CACzB,IACA,GAED,8BAA+B,CAC9B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,gCAAiC,CAChC,IACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7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","file":"static/js/main.c8e08a01.chunk.js","sourcesContent":["var map = {\n\t\"./ion-action-sheet.entry.js\": [\n\t\t663,\n\t\t5\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t664,\n\t\t6\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t665,\n\t\t7\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t666,\n\t\t17\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t667,\n\t\t18\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t668,\n\t\t43\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t669,\n\t\t19\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t670,\n\t\t20\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t671,\n\t\t21\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t672,\n\t\t22\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t673,\n\t\t44\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t674,\n\t\t10\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t675,\n\t\t23\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t676,\n\t\t45\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t677,\n\t\t46\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t678,\n\t\t24\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t679,\n\t\t25\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t680,\n\t\t26\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t681,\n\t\t27\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t682,\n\t\t28\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t683,\n\t\t8\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t684,\n\t\t14\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t685,\n\t\t9\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t686,\n\t\t29\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t687,\n\t\t30\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t688,\n\t\t31\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t689,\n\t\t11\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t690,\n\t\t16\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t691,\n\t\t47\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t692,\n\t\t32\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t693,\n\t\t33\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t694,\n\t\t34\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t695,\n\t\t35\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t696,\n\t\t48\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t697,\n\t\t13\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t698,\n\t\t49\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t699,\n\t\t36\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t700,\n\t\t15\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t701,\n\t\t37\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t702,\n\t\t38\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t703,\n\t\t39\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t704,\n\t\t12\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t705,\n\t\t50\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 347;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-icon.entry.js\": [\n\t\t706,\n\t\t57\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 349;\nmodule.exports = webpackAsyncContext;","import { composeStore } from \"store\";\r\nimport { worldSchema } from \"./schema/world-schema\";\r\nimport { InventoryItem, SpaceInfo, WorldInfo } from \"./worldInfo\";\r\n\r\nexport const useSpaceInfo = composeStore<SpaceInfo>({ schema: worldSchema, definition: \"space_info\" })\r\nexport const useInventory = composeStore<InventoryItem>({ schema: worldSchema, definition: \"inventory_item_info\" })\r\nexport const useWorldInfo = composeStore<WorldInfo>({ schema: worldSchema, definition: \"world_info\" })\r\n","import { composeStore } from \"store\";\r\nimport schema from \"./schema/account.schema.json\";\r\nimport { Account } from \"./account\";\r\nexport const useAccount = composeStore<Account>({ schema, definition: \"account\" })","import { useAccount } from \"./account/account-cache\";\r\n\r\n//namespace\r\n//definition\r\n//useStoreInstance\r\nexport const cache = {\r\n    worldseed: {\r\n        account: useAccount\r\n    }\r\n}","import { Store, StoreListener } from \"store/dist/store\"\r\nimport { getFirestore, doc, setDoc, collection, onSnapshot } from \"firebase/firestore\";\r\nimport { getApps, initializeApp } from \"firebase/app\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyANEewa6KqJyfG8_8Lu_gwL3BBoIGf-9ts\",\r\n    authDomain: \"interdimensionalsingularity.firebaseapp.com\",\r\n    databaseURL: \"https://interdimensionalsingularity.firebaseio.com\",\r\n    projectId: \"interdimensionalsingularity\",\r\n    storageBucket: \"interdimensionalsingularity.appspot.com\",\r\n    messagingSenderId: \"927809677934\",\r\n    appId: \"1:927809677934:web:4f70d168ca7d952409947f\"\r\n};\r\n\r\nexport const connect = () => {\r\n    return new Promise<string>((resolve, reject) => {\r\n        getApps().length === 0 && initializeApp(firebaseConfig)\r\n        if (getApps().length > 0) {\r\n            resolve(\"connected\")\r\n        } else {\r\n            reject(\"app not found\")\r\n        }\r\n    })\r\n}\r\nexport const listener: (namespace: string, collection: string) => StoreListener<any> = (namespace, collection) => {\r\n    const db = getFirestore();\r\n    const namespaced_collection = namespace + \"-\" + collection;\r\n    return (index, item, status) => {\r\n        return new Promise<string>((resolve, reject) => {\r\n            switch (status) {\r\n                case \"workspacing\":\r\n                    if (item && typeof item === \"object\") {\r\n                        setDoc(doc(db, namespaced_collection + \"-workspace\"), item).then(() => {\r\n                            resolve(index);\r\n                        }).catch(reject);\r\n                    }\r\n                    break;\r\n                case \"inserting\":\r\n                    setDoc(doc(db, namespaced_collection, index), item).then(() => {\r\n                        resolve(index);\r\n                    }).catch(reject);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n        })\r\n    }\r\n}\r\nexport const preload: (namespace: string, StoreApi: () => Store<any>) => Promise<string> = (namespace, store) => {\r\n    return new Promise<string>((resolve) => {\r\n        const db = getFirestore();\r\n        const namespaced_collection = namespace + \"-\" + store().collection;\r\n        let firstRun = true;\r\n        onSnapshot(collection(db, namespaced_collection), (snapShot: any) => {\r\n            const cloudRecords = snapShot.docs.map((doc: any) => ({\r\n                [doc.id]: doc.data()\r\n            })).reduce(\r\n                (a: any, b: any) =>\r\n                    ({ ...a, ...b }), {});\r\n            store().import({\r\n                ...store().records,\r\n                ...cloudRecords\r\n            }, false, false).then(() => {\r\n                if (firstRun) {\r\n                    resolve(\"pre-loaded\")\r\n                    firstRun = false;\r\n                }\r\n            })\r\n        })\r\n\r\n        onSnapshot(doc(db, namespaced_collection + \"-workspace\", \"instance\"), (doc) => {\r\n            store().setWorkspaceInstance(doc.data())\r\n        })\r\n\r\n    })\r\n\r\n}\r\nexport const firebaseSynchronizer = {\r\n    connect,\r\n    preload,\r\n    listener\r\n}\r\n","import { WalletAdapter } from '@solana/wallet-adapter-base';\r\nimport {\r\n    getLedgerWallet,\r\n    getPhantomWallet,\r\n    getSolflareWallet,\r\n    getSolletWallet,\r\n    getTorusWallet,\r\n    Wallet\r\n} from '@solana/wallet-adapter-wallets';\r\nimport * as web3 from '@solana/web3.js';\r\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\r\nimport create from \"zustand\";\r\n\r\n\r\n\r\ntype WalletType = \"solflare\" | \"sollet\" | \"torus\" | \"phantom\" | \"ledger\"\r\ntype WalletApi = {\r\n    connect: (type: WalletType) => void\r\n    address?: string\r\n    status: string\r\n    wallet?: WalletAdapter\r\n    walletAdapters: Record<WalletType, Wallet>\r\n    error?: { message: string }\r\n    balance?: string,\r\n}\r\nexport const useWallet = create<WalletApi>((set, store) => ({\r\n    status: \"disconnected\",\r\n    walletAdapters: {\r\n        solflare: getSolflareWallet(),\r\n        sollet: getSolletWallet(),\r\n        torus: getTorusWallet({ options: { clientId: \"\" } }),\r\n        phantom: getPhantomWallet(),\r\n        ledger: getLedgerWallet()\r\n    },\r\n    connect: (type) => {\r\n        const wallet = store().walletAdapters[type].adapter()\r\n        wallet.connect().then((e) => {\r\n            console.log(e);\r\n            set({\r\n                address: wallet.publicKey?.toBase58(), status: \"connected\", balance: \"\"\r\n            })\r\n        });\r\n        wallet.on(\"connect\", async () => {\r\n            var connection = new web3.Connection(\r\n                web3.clusterApiUrl('mainnet-beta'),\r\n                'confirmed',\r\n            );\r\n            const publicKey = store().wallet!.publicKey\r\n            if (publicKey === null) {\r\n                return;\r\n            }\r\n            connection.getAccountInfo(publicKey).then((r) => {\r\n                if (r === null) {\r\n                    set({ balance: \"0\" })\r\n                } else {\r\n                    set({ balance: String(r.lamports / LAMPORTS_PER_SOL) })\r\n                }\r\n            })\r\n        })\r\n        wallet.on(\"disconnect\", () => {\r\n            set({ status: \"disconnected\", address: undefined })\r\n        })\r\n        wallet.on(\"error\", () => {\r\n            set({ status: \"error\" })\r\n        })\r\n        wallet.on(\r\n            \"ready\", () => {\r\n                console.log(wallet);\r\n            }\r\n        )\r\n        console.log(wallet);\r\n        set({ wallet })\r\n    }\r\n}))\r\n","import { AppForm } from \"atomic\";\r\nimport { useAccount } from \"../../cache/account/account-cache\";\r\nimport accountSchema from \"../../cache/account/schema/account.schema.json\";\r\nexport const AccountModify: React.FC<{ owner: string }> = ({ owner }) => {\r\n    const insertAccount = useAccount(x => x.insert)\r\n    const retrieveAccount = useAccount(x => x.retrieve)\r\n    return <AppForm rootSchema={accountSchema}\r\n        objectSchema={accountSchema.definitions.account}\r\n        data={{ ...retrieveAccount(owner), owner }\r\n        } hiddenFields={[\"owner\"]}\r\n        onSubmit={(validAccount) => {\r\n            insertAccount(validAccount.owner, validAccount).then(() => {\r\n            })\r\n        }}>\r\n    </AppForm>\r\n}","import { AppRoute } from \"atomic\";\r\nimport { walletOutline } from \"ionicons/icons\";\r\nimport { WalletPage } from \"../pages/WalletPage\";\r\n\r\nexport const walletRoute: AppRoute = { icon: walletOutline, path: \"/wallet/\", title: \"Wallet\", component: WalletPage, exact: true };\r\n\r\nexport const walletRoutes: AppRoute[] = [walletRoute]","import { AppButton, AppButtons, AppCard, AppChip, AppItem, AppItemDivider, AppLabel, AppList, AppPage, AppSpinner, AppTitle } from \"atomic\";\r\nimport { useAccount } from \"../cache/account/account-cache\";\r\nimport { AccountModify } from \"../components/account/AccountModify\";\r\nimport { useWallet } from \"../hooks/useWallet\";\r\nexport const WalletPage: React.FC = () => {\r\n    const { wallet, connect, address = \"\", status, error, balance } = useWallet()\r\n    const account = useAccount(x => x.retrieve(address))\r\n    return < AppPage >\r\n        <AppCard title={\"Solana Wallet\"} titleColor=\"tertiary\" headerColor=\"light\">\r\n            {account && <AppItem>\r\n                <AppLabel>Alias:</AppLabel>\r\n                <AppButtons slot='end'>{account.alias}</AppButtons>\r\n            </AppItem>}\r\n            {status === \"connected\" && !account && <AccountModify owner={address} />}\r\n            <AppItemDivider />\r\n            <AppList>\r\n                <AppItem><AppLabel>Status:</AppLabel>\r\n                    <AppChip color={status === \"error\" ? \"danger\" : status === \"connected\" ? \"primary\" : \"medium\"}>\r\n                        {status}\r\n                    </AppChip>\r\n                </AppItem>\r\n                {error && error?.message}\r\n\r\n                {status === 'connected' && (<>\r\n                    <AppItem>\r\n                        <AppLabel>Account:</AppLabel>\r\n                        <AppButtons slot='end'>{address}</AppButtons>\r\n                    </AppItem>\r\n                    <AppItem>\r\n                        <AppLabel>Balance:</AppLabel>\r\n                        <AppButtons slot=\"end\">\r\n                            {balance ? <AppTitle color={balance === \"0\" ? \"danger\" : \"favorite\"}>{balance}\r\n                            </AppTitle> : <AppSpinner />}\r\n                        </AppButtons>\r\n                    </AppItem>\r\n                </>\r\n                )}\r\n            </AppList>\r\n        </AppCard>\r\n        {\r\n            status === \"connected\" &&\r\n            <AppButton expand=\"full\" fill=\"outline\" color=\"medium\" onClick={() => wallet?.disconnect()}>\r\n                disconnect</AppButton>\r\n        }\r\n        {\r\n            status !== \"connected\" &&\r\n            <AppButton expand=\"full\" onClick={() => {\r\n                connect(\"phantom\")\r\n            }}>\r\n                Connect Wallet\r\n            </AppButton>\r\n        }\r\n    </AppPage >\r\n}","import { AppButtons, AppItem, AppTitle, destination } from \"atomic\";\r\nimport { Account } from \"../../cache/account/account\";\r\nimport { accountDetailRoute } from \"../../routes/account-routes\";\r\n\r\nexport const AccountItem: React.FC<{ account: Account }> = ({ account }) => {\r\n    return <AppItem routerLink={destination(accountDetailRoute, { id: account.owner })}>\r\n        <AppButtons slot=\"start\" >\r\n            <AppTitle>\r\n                {account.alias}\r\n            </AppTitle>\r\n        </AppButtons>\r\n    </AppItem>\r\n}","import { AppRoute } from \"atomic\";\r\nimport { peopleOutline, personOutline } from \"ionicons/icons\";\r\nimport { AccountDetail } from \"../components/account/AccountDetail\";\r\nimport { AccountList } from \"../components/account/AccountList\";\r\n\r\nexport const accountDetailRoute: AppRoute = { icon: personOutline, path: \"/accounts/:id\", title: \"Account\", component: AccountDetail, dynamic: true };\r\nexport const accountListRoute: AppRoute = { icon: peopleOutline, path: \"/players\", title: \"Players\", component: AccountList };\r\n\r\nexport const accountRoutes: AppRoute[] = [accountDetailRoute, accountListRoute]","import { AppCard, AppContent, AppPage } from \"atomic\"\r\nimport { useParams } from \"react-router\"\r\nimport { useAccount } from \"../../cache/account/account-cache\"\r\nimport { useWallet } from \"../../hooks/useWallet\"\r\nexport const AccountDetail: React.FC = () => {\r\n    const { id } = useParams<{ id: string }>()\r\n    const account = useAccount(({ retrieve }) => retrieve(id))\r\n    const owner = useWallet(x => x.address)\r\n\r\n    return <AppPage>\r\n        <AppContent center>\r\n            <AppCard title={account.alias}>\r\n\r\n            </AppCard>\r\n        </AppContent>\r\n    </AppPage>\r\n\r\n}","import { AppCard, AppContent, AppList, AppPage } from \"atomic\"\r\nimport { Account } from \"../../cache/account/account\"\r\nimport { useAccount } from \"../../cache/account/account-cache\"\r\nimport { AccountItem } from \"./AccountItem\"\r\n\r\n\r\nexport const AccountList: React.FC = () => {\r\n    const accounts = useAccount(x => x.all())\r\n    return <AppPage>\r\n        <AppContent center>\r\n            <AppCard title=\"Players online\" titleColor=\"favorite\" headerColor=\"light\">\r\n                <AppList>\r\n                    {accounts.map((account: Account) => <AccountItem account={account} />)}\r\n                </AppList>\r\n            </AppCard>\r\n        </AppContent>\r\n    </AppPage>\r\n}","import { AppButtons, AppItem, AppTitle, destination } from \"atomic\";\r\nimport { InventoryItem } from \"../../cache/world/worldInfo\";\r\nimport { inventoryDetailRoute } from \"../../routes/inventory-routes\";\r\n\r\nexport const InventoryItemButton: React.FC<{ item: InventoryItem }> = ({ item }) => {\r\n    return <AppItem routerLink={destination(inventoryDetailRoute, { uuid: item.uuid })}>\r\n        <AppButtons slot=\"start\" >\r\n            <AppTitle>\r\n                {item.name}\r\n            </AppTitle>\r\n        </AppButtons>\r\n    </AppItem>\r\n}","import { AppList } from \"atomic\"\r\nimport { useInventory } from \"../../cache/world/world-cache\"\r\nimport { InventoryItem } from \"../../cache/world/worldInfo\"\r\nimport { InventoryItemButton } from \"./InventoryItemButton\"\r\n\r\n\r\nexport const InventoryItemList: React.FC = () => {\r\n    const inventory = useInventory(x => x.all())\r\n    return <AppList>\r\n        {inventory.map((item: InventoryItem) => <InventoryItemButton key={item.uuid} item={item} />)}\r\n    </AppList>\r\n}","import { AppRoute } from \"atomic\";\r\nimport { listOutline } from \"ionicons/icons\";\r\nimport { InventoryItemDetail } from \"../components/inventory/InventoryItemDetail\";\r\nimport { InventoryPage } from \"../pages/InventoryPage\";\r\n\r\nexport const inventoryDetailRoute: AppRoute = { icon: \"\", path: \"/inventory-item/:uuid\", title: \"\", component: InventoryItemDetail, dynamic: true };\r\nexport const inventoryListRoute: AppRoute = { icon: listOutline, path: \"/inventory\", title: \"Inventory\", component: InventoryPage };\r\n\r\nexport const inventoryRoutes: AppRoute[] = [inventoryDetailRoute, inventoryListRoute]","import { AppCard, AppContent, AppPage } from \"atomic\"\r\nimport { useParams } from \"react-router\"\r\nimport { useInventory } from \"../../cache/world/world-cache\"\r\nexport const InventoryItemDetail: React.FC = () => {\r\n    const { uuid } = useParams<{ uuid: string }>()\r\n    const item = useInventory(({ retrieve }) => retrieve(uuid))\r\n    console.log(uuid);\r\n    return <AppPage>\r\n        <AppContent center>\r\n            {item && <AppCard headerColor=\"tertiary\" title={item.name}>\r\n                {item.description}\r\n            </AppCard>}\r\n        </AppContent>\r\n    </AppPage>\r\n\r\n}","import { AppButton, AppCard, AppContent, AppItemDivider, AppPage } from \"atomic\";\r\nimport { useInventory } from \"../cache/world/world-cache\";\r\nimport { InventoryItemList } from \"../components/inventory/InventoryItemList\";\r\n\r\nexport const InventoryPage: React.FC = () => {\r\n    const { insert } = useInventory()\r\n    return < AppPage >\r\n        <AppContent center>\r\n\r\n            <AppCard title={\"Inventory\"} titleColor=\"tertiary\" headerColor=\"light\">\r\n                <InventoryItemList />\r\n                <AppItemDivider />\r\n                <AppButton onClick={() => {\r\n                    insert(\"0\", { model: \"g\", name: \"Test item\", type: \"\", uuid: \"0\", description: \"test inventory\" })\r\n                }} expand=\"full\" >\r\n                    Add to Inventory\r\n                </AppButton>\r\n            </AppCard>\r\n        </AppContent>\r\n    </AppPage >\r\n}","import { MapControls, Plane, useFBO } from \"@react-three/drei\"\r\nimport { Canvas, createPortal, useFrame, useLoader, useThree } from '@react-three/fiber'\r\nimport { AppButton, AppCard, AppChip, AppCol, AppContent, AppForm, AppGrid, AppIcon, AppItem, AppItemDivider, AppLoadingCard, AppModal, AppPage, AppRow, AppTitle, destination } from \"atomic\"\r\nimport { addOutline } from 'ionicons/icons'\r\nimport React, { Suspense, useRef, useState } from 'react'\r\nimport { useParams } from \"react-router\"\r\nimport * as THREE from 'three'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\r\nimport { worldSchema } from '../cache/world/schema/world-schema'\r\nimport { useSpaceInfo, useWorldInfo } from \"../cache/world/world-cache\"\r\nimport { Entity } from '../cache/world/worldInfo'\r\nimport { worldRoute } from \"../routes/world-routes\"\r\n\r\nconst Entity3D: React.FC<{ entity: Entity }> = ({ entity }) => {\r\n    const gltf = useLoader(GLTFLoader, entity.model)\r\n    return (\r\n        <primitive args={[...entity.offset.position]} object={gltf.scene} />\r\n    )\r\n}\r\nconst Scene: React.FC<{ entities: Entity[] }> = ({ entities }) => {\r\n    return <>\r\n        {entities.map(e => <Entity3D key={e.uuid} entity={e} />)}\r\n    </>\r\n}\r\n\r\nexport const DesktopSpaceCanvas: React.FC<{ entities: Entity[] }> = ({ entities }) => {\r\n    const camera = useRef()\r\n    const [virtualScene] = React.useState(() => new THREE.Scene())\r\n    const { size, } = useThree()\r\n    const fbo = useFBO(size.height, size.width)\r\n    useFrame(({ gl }) => {\r\n        if (camera.current) {\r\n            gl.setRenderTarget(fbo)\r\n            gl.render(virtualScene, camera.current)\r\n            gl.setRenderTarget(null)\r\n        }\r\n    })\r\n    return <>\r\n        <Plane args={[14, 14, 12]}>\r\n            <meshBasicMaterial map={fbo.texture} />\r\n        </Plane>\r\n        {createPortal(<>\r\n            <Scene entities={entities} />\r\n\r\n            <perspectiveCamera\r\n                position={[0, 20, 20]}\r\n                ref={camera}\r\n            />\r\n            <MapControls camera={camera.current}\r\n                enablePan\r\n                enableZoom\r\n                enableRotate />\r\n        </>\r\n            , virtualScene)}\r\n    </>\r\n\r\n}\r\n\r\nexport const SpacePage: React.FC = () => {\r\n    const { uuid } = useParams<{ uuid: string }>()\r\n    const space = useSpaceInfo(x => x.retrieve(uuid))\r\n    const updateSpace = useSpaceInfo(x => x.update)\r\n    const { entities } = space || { entities: [] };\r\n    const [status, setStatus] = useState<\"idle\" | \"editing\">(\"idle\")\r\n    const insertEntity = (e: Entity) => {\r\n        updateSpace(uuid, (spaceDraft) => {\r\n            spaceDraft.entities.push(e);\r\n        })\r\n    }\r\n    const world = useWorldInfo(x => x.retrieve(space.world))\r\n    return <AppPage>\r\n        {status === \"editing\" && <AppModal isOpen={status === \"editing\"} onDismiss={function (): void {\r\n            setStatus(\"idle\")\r\n        }}>\r\n            <AppContent>\r\n                <AppForm lockedFields={[\"world\"]} requiredOnly hiddenFields={[\"anchor\"]} data={{}} rootSchema={worldSchema} objectSchema={worldSchema.definitions.entity} onSubmit={(validEntity: any) => {\r\n                    const transformedEntity = { ...validEntity, offset: { position: [validEntity.position.x, validEntity.position.y, validEntity.position.z] } };\r\n                    insertEntity(transformedEntity);\r\n                    setStatus(\"idle\")\r\n                }} />\r\n            </AppContent>\r\n        </AppModal>\r\n        }\r\n        {space && <div style={{ zIndex: 10000, position: \"absolute\", left: 0, right: 0 }}><AppGrid>\r\n            <AppRow>\r\n                <AppCol size={\"6\"}>\r\n                    <AppCard headerColor=\"tertiary\" title={space?.name}>\r\n                        <AppItemDivider />\r\n                        {space.description}\r\n                        <AppItemDivider />\r\n                        <AppItem routerLink={destination(worldRoute, { uuid: space.world })}>\r\n                            {world.name}\r\n                        </AppItem>\r\n                    </AppCard>\r\n                </AppCol>\r\n                <AppCol size={\"12\"} />\r\n                <AppCol size={\"6\"}>\r\n                    <AppCard title={\"Entities\"}>\r\n                        <AppItemDivider />\r\n                        {entities.map((e) =>\r\n                            <AppItem><AppTitle>{e.name}</AppTitle><AppChip>{e.offset.position.join(\",\")}</AppChip></AppItem>\r\n                        )}\r\n                        <AppButton fill=\"clear\" onClick={() => {\r\n                            setStatus(\"editing\")\r\n                        }}>\r\n                            <AppIcon icon={addOutline} />\r\n                            New Entity\r\n                        </AppButton>\r\n                    </AppCard>\r\n                </AppCol>\r\n            </AppRow>\r\n        </AppGrid></div>}\r\n        <Suspense fallback={<AppLoadingCard />}>\r\n            {entities && <Canvas>\r\n                <DesktopSpaceCanvas entities={entities} />\r\n            </Canvas>}\r\n        </Suspense>\r\n    </AppPage>\r\n}\r\n","import { AppForm, AppModal } from \"atomic\"\r\nimport { geohashForLocation } from \"geofire-common\"\r\nimport { FeatureCollection } from \"geojson\"\r\nimport React, { useState } from 'react'\r\nimport Globe from \"react-globe.gl\"\r\nimport { useHistory } from \"react-router\"\r\nimport { v4 } from \"uuid\"\r\nimport { worldSchema } from \"../cache/world/schema/world-schema\"\r\nimport { useSpaceInfo } from \"../cache/world/world-cache\"\r\nimport { SpaceInfo, WorldInfo } from '../cache/world/worldInfo'\r\nexport const toWorldFeatureCollection = (world: WorldInfo, spaces: SpaceInfo[]) => {\r\n    const result: FeatureCollection = {\r\n        type: \"FeatureCollection\",\r\n        features: spaces.map(x => ({\r\n            type: \"Feature\", geometry: { ...x.anchor, type: \"Point\" },\r\n            properties: {\r\n                longitude: x.anchor.coordinates[0],\r\n                latitude: x.anchor.coordinates[1],\r\n                name: x.name || world.name,\r\n                uuid: x.uuid\r\n            }\r\n        }))\r\n    }\r\n    return result;\r\n}\r\nconst emptySpace: SpaceInfo = {\r\n    name: \"\", type: \"space\",\r\n    world: \"unknown\", uuid: v4(),\r\n    entities: [], anchor: {\r\n        coordinates: [0, 0, 0],\r\n        type: \"Point\"\r\n    }\r\n}\r\n\r\nexport const WorldGlobe: React.FC<{ worldInfo: WorldInfo }> = ({ worldInfo }) => {\r\n    const spaces = useSpaceInfo(x => x.filter(x => x.world === worldInfo?.uuid))\r\n    const { insert } = useSpaceInfo();\r\n    const [status, setStatus] = useState<\"editing\" | \"idle\">()\r\n    const [newSpace, setNewSpace] = useState<SpaceInfo>({ ...emptySpace, world: worldInfo.uuid })\r\n    const worldFeatureCollection = toWorldFeatureCollection(worldInfo, spaces);\r\n    const { push } = useHistory()\r\n    return <div style={{ position: \"absolute\" }}>\r\n        <Globe labelsData={worldFeatureCollection.features}\r\n            labelLat={(d: any) => d.properties.latitude}\r\n            labelLng={(d: any) => d.properties.longitude}\r\n            labelText={(d: any) => d.properties.name}\r\n            labelSize={(d: any) => 3}\r\n            labelDotRadius={(d: any) => 3}\r\n            labelColor={() => 'rgba(200, 20, 200, 1)'}\r\n            labelResolution={10}\r\n            labelAltitude={0.002}\r\n            onLabelClick={(l: any) => {\r\n                push(\"/space/\" + l.properties.uuid);\r\n            }}\r\n            onGlobeRightClick={({ lat, lng }) => {\r\n                setNewSpace(x => ({ ...x, anchor: { ...x.anchor, geohash: geohashForLocation([lat, lng]), coordinates: [lat, lng, 1] } }));\r\n                setStatus(\"editing\");\r\n            }}>\r\n\r\n        </Globe>\r\n        <AppModal isOpen={status === \"editing\"} onDismiss={function (): void {\r\n            setStatus(\"idle\")\r\n        }}>\r\n            <AppForm lockedFields={[\"world\"]} requiredOnly hiddenFields={[\"anchor\"]} data={{ ...newSpace }} rootSchema={worldSchema} objectSchema={worldSchema.definitions.space_node} onSubmit={(validData: SpaceInfo) => {\r\n                console.log(validData);\r\n                insert(validData.uuid, { ...validData }).then(() => {\r\n                    setStatus(\"idle\");\r\n                    setNewSpace({ ...emptySpace });\r\n                })\r\n            }} />\r\n        </AppModal>\r\n    </div >\r\n}\r\n","import { AppCard, AppCol, AppGrid, AppItem, AppItemDivider, AppPage, AppRow, destination } from \"atomic\";\r\nimport { useParams } from \"react-router\";\r\nimport { useSpaceInfo, useWorldInfo } from \"../cache/world/world-cache\";\r\nimport { spaceRoute } from \"../routes/world-routes\";\r\nimport { WorldGlobe } from \"./GlobePage\";\r\n\r\n\r\nconst WorldPage: React.FC = () => {\r\n    const { uuid } = useParams<{ uuid: string }>()\r\n    const worldInfo = useWorldInfo(worlds => worlds.find(x => x.uuid === uuid))\r\n    const spaces = useSpaceInfo(x => x.filter(x => x.world === worldInfo?.uuid))\r\n    return (\r\n        <AppPage>\r\n            {worldInfo && <WorldGlobe worldInfo={worldInfo} />}\r\n            {worldInfo && <AppGrid>\r\n                <AppRow>\r\n                    <AppCol size={\"5\"}>\r\n                        <AppCard headerColor=\"tertiary\" title={worldInfo?.name}>\r\n                            {spaces.map(space => <AppItem\r\n                                key={space.uuid}\r\n                                routerLink={\r\n                                    destination(spaceRoute, { uuid: space.uuid })\r\n                                }>\r\n                                {space.name}\r\n                            </AppItem>)}\r\n                            <AppItemDivider />\r\n                        </AppCard>\r\n                    </AppCol>\r\n                </AppRow>\r\n            </AppGrid>}\r\n        </AppPage >\r\n    );\r\n};\r\n\r\nexport default WorldPage;\r\n","import { AppCard, AppItem, AppList, AppPage, AppTitle, destination } from \"atomic\";\r\nimport { useWorldInfo } from \"../cache/world/world-cache\";\r\nimport { WorldInfo } from \"../cache/world/worldInfo\";\r\nimport { worldRoute } from \"../routes/world-routes\";\r\n\r\n\r\nconst WorldsPage: React.FC = () => {\r\n    const worlds: WorldInfo[] = useWorldInfo(x => x.all())\r\n    return (\r\n        <AppPage>\r\n            <AppCard headerColor=\"light\" subTitle={\"Metaverse directory\"}>\r\n                <AppList>\r\n                    {worlds.map(({ uuid, name, }) =>\r\n                        <AppItem key={uuid} routerLink={destination(worldRoute, { uuid })}>\r\n                            <AppTitle>\r\n                                {name}\r\n                            </AppTitle>\r\n                        </AppItem>)}\r\n                </AppList>\r\n            </AppCard>\r\n        </AppPage >\r\n    );\r\n};\r\n\r\nexport default WorldsPage;\r\n","import { AppRoute } from \"atomic\";\r\nimport { SpacePage } from \"../pages/SpacePage\";\r\nimport { MintPage } from \"../pages/MintPage\";\r\nimport WorldPage from \"../pages/WorldPage\";\r\nimport WorldsPage from \"../pages/WorldsPage\";\r\nimport { globeOutline, starOutline } from \"ionicons/icons\"\r\nexport const mintRoute: AppRoute = { icon: \"\", path: \"/mint/:uuid\", title: \"\", component: MintPage, dynamic: true };\r\nexport const spaceRoute: AppRoute = { icon: starOutline, path: \"/space/:uuid\", title: \"\", component: SpacePage, dynamic: true };\r\nexport const worldRoute: AppRoute = { icon: globeOutline, path: \"/world/:uuid\", title: \"\", component: WorldPage, dynamic: true };\r\nexport const worldsRoute: AppRoute = { icon: globeOutline, path: \"/worlds/\", title: \"Worlds\", component: WorldsPage, exact: true };\r\n\r\nexport const worldRoutes: AppRoute[] = [\r\n    worldRoute,\r\n    worldsRoute,\r\n    spaceRoute,\r\n    mintRoute\r\n];","import { AppForm, AppPage } from \"atomic\"\r\nimport useTitle from \"atomic/dist/hooks/useAppTitle\"\r\nimport { useEffect } from \"react\"\r\nimport { useParams } from \"react-router\"\r\nimport { worldSchema } from \"../cache/world/schema/world-schema\"\r\nexport const MintPage: React.FC = () => {\r\n    const { id } = useParams<{ id: string }>()\r\n    const setTitle = useTitle(x => x.setTitle)\r\n    useEffect(() => {\r\n        setTitle(\"Mint \" + id);\r\n    })\r\n    return <AppPage>\r\n        <AppForm\r\n            onSubmit={(space) => {\r\n                console.log(space)\r\n            }}\r\n            rootSchema={worldSchema}\r\n            objectSchema={worldSchema.definitions.space_node}\r\n            data={{}}>\r\n        </AppForm>\r\n    </AppPage>\r\n}\r\n","import { AppRoute } from \"atomic\";\r\nimport { dashboardRoute } from \"./dashboard-route\";\r\nimport { accountRoutes } from \"./account-routes\";\r\nimport { walletRoutes } from \"./wallet-routes\";\r\nimport { worldRoutes } from \"./world-routes\";\r\nimport { inventoryRoutes } from \"./inventory-routes\";\r\n\r\nexport const routes: AppRoute[] = [dashboardRoute, ...walletRoutes, ...accountRoutes, ...worldRoutes, ...inventoryRoutes]","import { AppRoute } from \"atomic\";\r\nimport Home from \"../pages/Home\";\r\nexport const dashboardRoute: AppRoute = { icon: \"\", path: \"/\", title: \"Dashboard\", component: Home, exact: true };\r\n","import { AppContent, AppPage, AppRouteCard } from \"atomic\"\r\nimport { useWallet } from \"../hooks/useWallet\";\r\nimport { accountListRoute } from \"../routes/account-routes\";\r\nimport { inventoryListRoute } from \"../routes/inventory-routes\";\r\nimport { worldsRoute } from \"../routes/world-routes\";\r\nconst Home: React.FC = () => {\r\n  const status = useWallet(x => x.status)\r\n  return (\r\n    <AppPage>\r\n      <AppContent center>\r\n        <AppRouteCard {...worldsRoute} />\r\n        <AppRouteCard {...accountListRoute} />\r\n        {status === \"connected\" && <AppRouteCard {...inventoryListRoute} />}\r\n      </AppContent>\r\n    </AppPage>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { AppConfig } from \"atomic\";\r\nimport { cache } from \"../cache\";\r\nimport { firebaseSynchronizer } from \"../cache/cloud-sync/firebase-synchronizer\";\r\nimport { LoginButton } from \"../components/account/LoginButton\";\r\nimport { DiscordLogin } from \"../components/discord/DiscordLogin\";\r\nimport { ConnectButton } from \"../components/wallet/ConnectButton\";\r\nimport { routes, sections } from \"../routes/\";\r\n\r\nconst { listener, connect, preload } = firebaseSynchronizer;\r\n\r\nconst Config: AppConfig =\r\n{\r\n    appId: \"worldseed\",\r\n    version: \"0.0.3\",\r\n    title: \"World Seed\",\r\n    cache,\r\n    darkMode: true,\r\n    about: \"Its a world seed\",\r\n    sections,\r\n    routes,\r\n    animated: true,\r\n    bottomBar: {\r\n        hideNext: true,\r\n        end: DiscordLogin,\r\n        start: ConnectButton\r\n    },\r\n    settings: {\r\n        disabled: true,\r\n    },\r\n    serialization: {\r\n        mode: \"custom\",\r\n        synchronization: {\r\n            listener,\r\n            connect,\r\n            preload\r\n        }\r\n    }\r\n\r\n\r\n}\r\nexport default Config;","import { accountListRoute } from \"./account-routes\";\r\nimport { inventoryListRoute } from \"./inventory-routes\";\r\nimport { walletRoute } from \"./wallet-routes\";\r\nimport { worldsRoute } from \"./world-routes\";\r\n\r\nexport const sections = { \"World Seed\": [worldsRoute, accountListRoute, inventoryListRoute, walletRoute] }\r\n","import { AppButton, AppModal } from \"atomic\"\r\nimport { useState } from \"react\"\r\n\r\nexport const DiscordLogin: React.FC = () => {\r\n    const widget = <>\r\n        <iframe title=\"discord-login\" src=\"https://discord.com/widget?id=885998011258392638&theme=dark\" frameBorder={\"0\"} sandbox=\"allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts\"></iframe></>\r\n    const [showDiscord, setShowDiscord] = useState(false)\r\n    return <>\r\n        <AppButton color=\"primary\" onClick={() => {\r\n            setShowDiscord(true)\r\n        }}>\r\n            Discord\r\n\r\n        </AppButton>\r\n        <AppModal isOpen={showDiscord} children={widget} onDismiss={() => {\r\n            setShowDiscord(false)\r\n        }} />\r\n    </>\r\n}","import { AppButton } from \"atomic\"\r\nimport { useWallet } from \"../../hooks/useWallet\"\r\nimport { walletRoute } from \"../../routes/wallet-routes\"\r\n\r\nexport const ConnectButton: React.FC = () => {\r\n    const { status } = useWallet()\r\n    return < AppButton routerLink={walletRoute.path} color={status !== \"connected\" ? \"primary\" : \"favorite\"} >\r\n        {status}\r\n    </AppButton >\r\n}","import { AppRoot } from 'atomic';\r\nimport { useEffect } from \"react\";\r\nimport { useSpaceInfo, useWorldInfo } from \"./cache/world/world-cache\";\r\nimport config from \"./config\";\r\n\r\nconst App: React.FC = () => {\r\n  const insertSpace = useSpaceInfo(x => x.insert)\r\n  const insertWorld = useWorldInfo(x => x.insert)\r\n  const telesto_uuid = \"2877efdb-bc3f-466c-a3ea-9f34da83c2f0\"\r\n  const esperia_uuid = \"82d49e72-cee0-45ae-bab1-76c2dfe3599a\"\r\n  const telesto_hq_uuid = \"ccab770d-9d0e-40dc-8e5e-b8eb6ecf7e2d\";\r\n  useEffect(() => {\r\n\r\n    insertSpace(telesto_hq_uuid, {\r\n      world: telesto_uuid,\r\n      description: \"Its a great HQ BBY\",\r\n      anchor: {\r\n        type: \"Point\",\r\n        coordinates: [-47, -15]\r\n      },\r\n      entities: [\r\n        {\r\n          name: \"building\", description: \"\", uuid: \"asdasd\",\r\n          type: \"model\", characteristics: [\r\n            \"grabbable\",\r\n            \"ownable\"\r\n          ],\r\n          anchor: {\r\n            type: \"Point\",\r\n            coordinates: [70, 73]\r\n          },\r\n          offset: {\r\n            position: [3, 2, 0],\r\n            rotation: [0, 0, 0, 0],\r\n          },\r\n          model: \"https://telesto.world/diamond.glb\"\r\n        }],\r\n      uuid: telesto_hq_uuid,\r\n      name: \"Telesto HQ\",\r\n      type: \"space\"\r\n    })\r\n\r\n    insertWorld(telesto_uuid, {\r\n      description: \"~ ~ a e s t h e t i c ~ ~\",\r\n      uuid: telesto_uuid,\r\n      name: \"Telesto\",\r\n      scale: 2,\r\n      map: \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\",\r\n      type: \"world\"\r\n    })\r\n    insertWorld(esperia_uuid, {\r\n      description: \"Land of the Espers\",\r\n      scale: 2,\r\n      uuid: esperia_uuid,\r\n      name: \"Esperia\",\r\n      map: \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\",\r\n      type: \"world\"\r\n    })\r\n\r\n  });\r\n  return <AppRoot {...config} />\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}