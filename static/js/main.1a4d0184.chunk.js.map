{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5 lazy /^/.*/.entry/.js$/ groupOptions: {} namespace object","../node_modules/ionicons/dist/esm-es5 lazy /^/.*/.entry/.js$/ groupOptions: {} namespace object","cache/world/world-cache.ts","cache/account/account-cache.ts","cache/index.ts","hooks/useWallet.ts","routes/wallet-routes.ts","pages/WalletPage.tsx","components/account/AccountItem.tsx","routes/account-routes.ts","components/account/AccountDetail.tsx","components/account/AccountList.tsx","components/inventory/InventoryItemButton.tsx","components/inventory/InventoryItemList.tsx","routes/inventory-routes.ts","components/inventory/InventoryItemDetail.tsx","pages/InventoryPage.tsx","pages/SpacePage.tsx","pages/MapPage.tsx","pages/WorldPage.tsx","pages/WorldsPage.tsx","routes/world-routes.ts","pages/MintPage.tsx","routes/routes.ts","routes/dashboard-route.ts","pages/Home.tsx","config/index.ts","routes/sections.ts","components/discord/DiscordLogin.tsx","components/wallet/ConnectButton.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","useSpaceInfo","composeStore","schema","worldSchema","definition","useInventory","useWorldInfo","useAccount","cache","worldseed","account","useWallet","create","set","store","status","walletAdapters","solflare","getSolflareWallet","sollet","getSolletWallet","torus","getTorusWallet","options","clientId","phantom","getPhantomWallet","ledger","getLedgerWallet","connect","type","wallet","adapter","console","log","address","publicKey","toBase58","balance","on","a","connection","web3","getAccountInfo","r","String","lamports","LAMPORTS_PER_SOL","walletRoute","icon","walletOutline","path","title","component","error","titleColor","headerColor","color","message","slot","expand","fill","onClick","disconnect","exact","walletRoutes","AccountItem","routerLink","destination","accountDetailRoute","owner","alias","personOutline","useParams","retrieve","center","dynamic","accountListRoute","peopleOutline","accounts","x","all","accountRoutes","InventoryItemButton","item","inventoryDetailRoute","uuid","name","InventoryItemList","inventory","description","inventoryListRoute","listOutline","insert","model","inventoryRoutes","Entity3D","entity","gltf","useLoader","GLTFLoader","args","offset","position","object","scene","Scene","entities","DesktopSpaceCanvas","camera","useRef","React","useState","THREE","virtualScene","size","useThree","fbo","useFBO","height","width","useFrame","gl","current","setRenderTarget","render","texture","createPortal","ref","MapControls","enablePan","enableZoom","enableRotate","MapPage","world","usePosition","markers","latitude","longitude","coordinates","anchor","slice","markerOffset","geography","children","geographies","geo","rsmKey","stroke","strokeWidth","textAnchor","y","style","fontFamily","WorldPage","worlds","find","spaces","space","spaceRoute","geohash","WorldsPage","subTitle","worldRoute","mintRoute","setTitle","useTitle","useEffect","onSubmit","rootSchema","objectSchema","definitions","space_node","data","starOutline","fallback","globeOutline","worldsRoute","worldRoutes","routes","Config","appId","version","darkMode","about","sections","animated","bottomBar","hideNext","end","widget","src","frameBorder","sandbox","showDiscord","setShowDiscord","isOpen","onDismiss","start","settings","disabled","serialization","mode","App","insertSpace","insertWorld","characteristics","rotation","config","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"ygEAAA,IAAIA,EAAM,CACT,8BAA+B,CAC9B,IACA,GAED,uBAAwB,CACvB,IACA,GAED,uBAAwB,CACvB,IACA,GAED,0BAA2B,CAC1B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,wBAAyB,CACxB,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,sBAAuB,CACtB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mCAAoC,CACnC,IACA,IAED,uBAAwB,CACvB,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,wBAAyB,CACxB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,uBAAwB,CACvB,IACA,GAED,uBAAwB,CACvB,IACA,IAED,yBAA0B,CACzB,IACA,GAED,8BAA+B,CAC9B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,gCAAiC,CAChC,IACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7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","file":"static/js/main.1a4d0184.chunk.js","sourcesContent":["var map = {\n\t\"./ion-action-sheet.entry.js\": [\n\t\t659,\n\t\t5\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t660,\n\t\t6\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t661,\n\t\t7\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t662,\n\t\t17\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t663,\n\t\t18\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t664,\n\t\t43\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t665,\n\t\t19\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t666,\n\t\t20\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t667,\n\t\t21\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t668,\n\t\t22\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t669,\n\t\t44\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t670,\n\t\t10\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t671,\n\t\t23\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t672,\n\t\t45\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t673,\n\t\t46\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t674,\n\t\t24\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t675,\n\t\t25\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t676,\n\t\t26\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t677,\n\t\t27\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t678,\n\t\t28\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t679,\n\t\t8\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t680,\n\t\t14\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t681,\n\t\t9\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t682,\n\t\t29\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t683,\n\t\t30\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t684,\n\t\t31\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t685,\n\t\t11\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t686,\n\t\t16\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t687,\n\t\t47\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t688,\n\t\t32\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t689,\n\t\t33\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t690,\n\t\t34\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t691,\n\t\t35\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t692,\n\t\t48\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t693,\n\t\t13\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t694,\n\t\t49\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t695,\n\t\t36\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t696,\n\t\t15\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t697,\n\t\t37\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t698,\n\t\t38\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t699,\n\t\t39\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t700,\n\t\t12\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t701,\n\t\t50\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 341;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-icon.entry.js\": [\n\t\t702,\n\t\t57\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 343;\nmodule.exports = webpackAsyncContext;","import { composeStore } from \"store\";\r\nimport { worldSchema } from \"./schema/world-schema\";\r\nimport { InventoryItem, SpaceInfo, WorldInfo } from \"./worldInfo\";\r\n\r\nexport const useSpaceInfo = composeStore<SpaceInfo>({ schema: worldSchema, definition: \"space_info\" })\r\nexport const useInventory = composeStore<InventoryItem>({ schema: worldSchema, definition: \"inventory_item_info\" })\r\nexport const useWorldInfo = composeStore<WorldInfo>({ schema: worldSchema, definition: \"world_info\" })\r\n","import { composeStore } from \"store\";\r\nimport schema from \"./schema/account.schema.json\";\r\nimport { Account } from \"./account\";\r\nexport const useAccount = composeStore<Account>({ schema, definition: \"account\" })","import { useAccount } from \"./account/account-cache\";\r\n\r\n//namespace\r\n//definition\r\n//useStoreInstance\r\nexport const cache = {\r\n    worldseed: {\r\n        account: useAccount\r\n    }\r\n}","import { WalletAdapter } from '@solana/wallet-adapter-base';\r\nimport {\r\n    getLedgerWallet,\r\n    getPhantomWallet,\r\n    getSolflareWallet,\r\n    getSolletWallet,\r\n    getTorusWallet,\r\n    Wallet\r\n} from '@solana/wallet-adapter-wallets';\r\nimport * as web3 from '@solana/web3.js';\r\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\r\nimport create from \"zustand\";\r\ntype WalletType = \"solflare\" | \"sollet\" | \"torus\" | \"phantom\" | \"ledger\"\r\ntype WalletApi = {\r\n    connect: (type: WalletType) => void\r\n    address?: string\r\n    status: string\r\n    wallet?: WalletAdapter\r\n    walletAdapters: Record<WalletType, Wallet>\r\n    error?: { message: string }\r\n    balance?: string,\r\n}\r\nexport const useWallet = create<WalletApi>((set, store) => ({\r\n    status: \"disconnected\",\r\n    walletAdapters: {\r\n        solflare: getSolflareWallet(),\r\n        sollet: getSolletWallet(),\r\n        torus: getTorusWallet({ options: { clientId: \"\" } }),\r\n        phantom: getPhantomWallet(),\r\n        ledger: getLedgerWallet()\r\n    },\r\n    connect: (type) => {\r\n        const wallet = store().walletAdapters[type].adapter()\r\n        wallet.connect().then((e) => {\r\n            console.log(e);\r\n            set({\r\n                address: wallet.publicKey?.toBase58(), status: \"connected\", balance: \"\"\r\n            })\r\n        });\r\n        wallet.on(\"connect\", async () => {\r\n            var connection = new web3.Connection(\r\n                web3.clusterApiUrl('mainnet-beta'),\r\n                'confirmed',\r\n            );\r\n            const publicKey = store().wallet!.publicKey\r\n            if (publicKey === null) {\r\n                return;\r\n            }\r\n            connection.getAccountInfo(publicKey).then((r) => {\r\n                if (r === null) {\r\n                    set({ balance: \"0\" })\r\n                } else {\r\n                    set({ balance: String(r.lamports / LAMPORTS_PER_SOL) })\r\n                }\r\n            })\r\n        })\r\n        wallet.on(\"disconnect\", () => {\r\n            set({ status: \"disconnected\" })\r\n        })\r\n        wallet.on(\"error\", () => {\r\n            set({ status: \"error\" })\r\n        })\r\n        wallet.on(\r\n            \"ready\", () => {\r\n                console.log(wallet);\r\n            }\r\n        )\r\n        console.log(wallet);\r\n        set({ wallet })\r\n    }\r\n}))\r\n","import { AppRoute } from \"atomic\";\r\nimport { walletOutline } from \"ionicons/icons\";\r\nimport { WalletPage } from \"../pages/WalletPage\";\r\n\r\nexport const walletRoute: AppRoute = { icon: walletOutline, path: \"/wallet/\", title: \"Wallet\", component: WalletPage, exact: true };\r\n\r\nexport const walletRoutes: AppRoute[] = [walletRoute]","import { AppButton, AppButtons, AppCard, AppChip, AppItem, AppItemDivider, AppLabel, AppList, AppPage, AppSpinner, AppTitle } from \"atomic\";\r\nimport { useWallet } from \"../hooks/useWallet\";\r\n\r\nexport const WalletPage: React.FC = () => {\r\n    const { wallet, connect, address, status, error, balance } = useWallet()\r\n\r\n    return < AppPage >\r\n        <AppCard title={\"Solana Wallet\"} titleColor=\"tertiary\" headerColor=\"light\">\r\n            <AppItemDivider />\r\n            <AppList>\r\n                <AppItem><AppLabel>Status:</AppLabel>\r\n                    <AppChip color={status === \"error\" ? \"danger\" : status === \"connected\" ? \"primary\" : \"medium\"}>\r\n                        {status}\r\n                    </AppChip>\r\n                </AppItem>\r\n                {error && error?.message}\r\n\r\n                {status === 'connected' && (<>\r\n                    <AppItem>\r\n                        <AppLabel>Account:</AppLabel>\r\n                        <AppButtons slot='end'>{address}</AppButtons>\r\n                    </AppItem>\r\n                    <AppItem>\r\n                        <AppLabel>Balance:</AppLabel>\r\n                        <AppButtons slot=\"end\">\r\n                            {balance ? <AppTitle color={balance === \"0\" ? \"danger\" : \"favorite\"}>{balance}</AppTitle> : <AppSpinner />}\r\n                        </AppButtons>\r\n                    </AppItem>\r\n                </>\r\n                )}\r\n            </AppList>\r\n        </AppCard>\r\n        {\r\n            status === \"connected\" &&\r\n            <AppButton expand=\"full\" fill=\"outline\" color=\"medium\" onClick={() => wallet?.disconnect()}>disconnect</AppButton>\r\n        }\r\n        {\r\n            status === \"disconnected\" &&\r\n            <AppButton expand=\"full\" onClick={() => {\r\n                connect(\"phantom\")\r\n            }}>\r\n                Connect Wallet\r\n            </AppButton>\r\n        }\r\n    </AppPage >\r\n}","import { AppButtons, AppItem, AppTitle, destination } from \"atomic\";\r\nimport { Account } from \"../../cache/account/account\";\r\nimport { accountDetailRoute } from \"../../routes/account-routes\";\r\n\r\nexport const AccountItem: React.FC<{ account: Account }> = ({ account }) => {\r\n    return <AppItem routerLink={destination(accountDetailRoute, { id: account.owner })}>\r\n        <AppButtons slot=\"start\" >\r\n            <AppTitle>\r\n                {account.alias}\r\n            </AppTitle>\r\n        </AppButtons>\r\n    </AppItem>\r\n}","import { AppRoute } from \"atomic\";\r\nimport { peopleOutline, personOutline } from \"ionicons/icons\";\r\nimport { AccountDetail } from \"../components/account/AccountDetail\";\r\nimport { AccountList } from \"../components/account/AccountList\";\r\n\r\nexport const accountDetailRoute: AppRoute = { icon: personOutline, path: \"/accounts/:id\", title: \"Account\", component: AccountDetail, dynamic: true };\r\nexport const accountListRoute: AppRoute = { icon: peopleOutline, path: \"/players\", title: \"Players\", component: AccountList };\r\n\r\nexport const accountRoutes: AppRoute[] = [accountDetailRoute, accountListRoute]","import { AppCard, AppContent, AppPage } from \"atomic\"\r\nimport { useParams } from \"react-router\"\r\nimport { useAccount } from \"../../cache/account/account-cache\"\r\nexport const AccountDetail: React.FC = () => {\r\n    const { id } = useParams<{ id: string }>()\r\n    const account = useAccount(({ retrieve }) => retrieve(id))\r\n    return <AppPage>\r\n        <AppContent center>\r\n            <AppCard title={account.alias}>\r\n                {}\r\n            </AppCard>\r\n        </AppContent>\r\n    </AppPage>\r\n\r\n}","import { AppCard, AppContent, AppList, AppPage } from \"atomic\"\r\nimport { Account } from \"../../cache/account/account\"\r\nimport { useAccount } from \"../../cache/account/account-cache\"\r\nimport { AccountItem } from \"./AccountItem\"\r\n\r\n\r\nexport const AccountList: React.FC = () => {\r\n    const accounts = useAccount(x => x.all())\r\n    return <AppPage>\r\n        <AppContent center>\r\n            <AppCard title=\"Players online\" titleColor=\"favorite\" headerColor=\"light\">\r\n                <AppList>\r\n                    {accounts.map((account: Account) => <AccountItem account={account} />)}\r\n                </AppList>\r\n            </AppCard>\r\n        </AppContent>\r\n    </AppPage>\r\n}","import { AppButtons, AppItem, AppTitle, destination } from \"atomic\";\r\nimport { InventoryItem } from \"../../cache/world/worldInfo\";\r\nimport { inventoryDetailRoute } from \"../../routes/inventory-routes\";\r\n\r\nexport const InventoryItemButton: React.FC<{ item: InventoryItem }> = ({ item }) => {\r\n    return <AppItem routerLink={destination(inventoryDetailRoute, { uuid: item.uuid })}>\r\n        <AppButtons slot=\"start\" >\r\n            <AppTitle>\r\n                {item.name}\r\n            </AppTitle>\r\n        </AppButtons>\r\n    </AppItem>\r\n}","import { AppList } from \"atomic\"\r\nimport { useInventory } from \"../../cache/world/world-cache\"\r\nimport { InventoryItem } from \"../../cache/world/worldInfo\"\r\nimport { InventoryItemButton } from \"./InventoryItemButton\"\r\n\r\n\r\nexport const InventoryItemList: React.FC = () => {\r\n    const inventory = useInventory(x => x.all())\r\n    return <AppList>\r\n        {inventory.map((item: InventoryItem) => <InventoryItemButton key={item.uuid} item={item} />)}\r\n    </AppList>\r\n}","import { AppRoute } from \"atomic\";\r\nimport { listOutline } from \"ionicons/icons\";\r\nimport { InventoryItemDetail } from \"../components/inventory/InventoryItemDetail\";\r\nimport { InventoryPage } from \"../pages/InventoryPage\";\r\n\r\nexport const inventoryDetailRoute: AppRoute = { icon: \"\", path: \"/inventory-item/:uuid\", title: \"\", component: InventoryItemDetail, dynamic: true };\r\nexport const inventoryListRoute: AppRoute = { icon: listOutline, path: \"/inventory\", title: \"Inventory\", component: InventoryPage };\r\n\r\nexport const inventoryRoutes: AppRoute[] = [inventoryDetailRoute, inventoryListRoute]","import { AppCard, AppContent, AppPage } from \"atomic\"\r\nimport { useParams } from \"react-router\"\r\nimport { useInventory } from \"../../cache/world/world-cache\"\r\nexport const InventoryItemDetail: React.FC = () => {\r\n    const { uuid } = useParams<{ uuid: string }>()\r\n    const item = useInventory(({ retrieve }) => retrieve(uuid))\r\n    console.log(uuid);\r\n    return <AppPage>\r\n        <AppContent center>\r\n            {item && <AppCard headerColor=\"tertiary\" title={item.name}>\r\n                {item.description}\r\n            </AppCard>}\r\n        </AppContent>\r\n    </AppPage>\r\n\r\n}","import { AppButton, AppCard, AppContent, AppItemDivider, AppPage } from \"atomic\";\r\nimport { useInventory } from \"../cache/world/world-cache\";\r\nimport { InventoryItemList } from \"../components/inventory/InventoryItemList\";\r\n\r\nexport const InventoryPage: React.FC = () => {\r\n    const { insert } = useInventory()\r\n    return < AppPage >\r\n        <AppContent center>\r\n\r\n            <AppCard title={\"Inventory\"} titleColor=\"tertiary\" headerColor=\"light\">\r\n                <InventoryItemList />\r\n                <AppItemDivider />\r\n                <AppButton onClick={() => {\r\n                    insert(\"0\", { model: \"g\", name: \"Test item\", type: \"\", uuid: \"0\", description: \"test inventory\" })\r\n                }} expand=\"full\" >\r\n                    Add to Inventory\r\n                </AppButton>\r\n            </AppCard>\r\n        </AppContent>\r\n    </AppPage >\r\n}","import { Canvas, createPortal, useFrame, useLoader, useThree } from '@react-three/fiber'\r\nimport { AppLoadingCard, AppPage } from \"atomic\"\r\nimport { Suspense, useRef } from \"react\"\r\nimport { useParams } from \"react-router\"\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\r\nimport { useSpaceInfo } from \"../cache/world/world-cache\"\r\nimport { Entity } from '../cache/world/worldInfo'\r\nimport { MapControls, useFBO } from \"@react-three/drei\"\r\nimport React from 'react'\r\nimport * as THREE from 'three'\r\nimport { Plane } from '@react-three/drei'\r\n\r\nconst Entity3D: React.FC<{ entity: Entity }> = ({ entity }) => {\r\n    const gltf = useLoader(GLTFLoader, entity.model)\r\n    return (\r\n        <primitive args={[...entity.offset.position]} object={gltf.scene} />\r\n    )\r\n}\r\nconst Scene: React.FC<{ entities: Entity[] }> = ({ entities }) => {\r\n    return <>\r\n        {entities.map(e => <Entity3D key={e.uuid} entity={e} />)}\r\n    </>\r\n}\r\n\r\nexport const DesktopSpaceCanvas: React.FC<{ entities: Entity[] }> = ({ entities }) => {\r\n    const camera = useRef()\r\n    const [virtualScene] = React.useState(() => new THREE.Scene())\r\n    const { size, } = useThree()\r\n    const fbo = useFBO(size.height, size.width)\r\n    useFrame(({ gl }) => {\r\n        if (camera.current) {\r\n            gl.setRenderTarget(fbo)\r\n            gl.render(virtualScene, camera.current)\r\n            gl.setRenderTarget(null)\r\n        }\r\n    })\r\n    return <>\r\n        <Plane args={[14, 14, 12]}>\r\n            <meshBasicMaterial map={fbo.texture} />\r\n        </Plane>\r\n        {createPortal(<>\r\n            <Scene entities={entities} />\r\n\r\n            <perspectiveCamera\r\n                position={[0, 20, 20]}\r\n                ref={camera}\r\n            />\r\n            <MapControls camera={camera.current}\r\n                enablePan\r\n                enableZoom\r\n                enableRotate />\r\n        </>\r\n            , virtualScene)}\r\n    </>\r\n\r\n}\r\n\r\nexport const SpacePage: React.FC = () => {\r\n    const { geohash } = useParams<{ geohash: string }>()\r\n    const space = useSpaceInfo(x => x.retrieve(geohash))\r\n    const { entities } = space;\r\n    return <AppPage>\r\n        <Suspense fallback={<AppLoadingCard />}>\r\n            {entities && <Canvas>\r\n                <DesktopSpaceCanvas entities={entities} />\r\n            </Canvas>}\r\n        </Suspense>\r\n    </AppPage>\r\n}\r\n","import { ComposableMap, Geographies, Geography, Marker } from \"react-simple-maps\";\r\nimport { usePosition } from \"use-position\";\r\nimport { useSpaceInfo } from \"../cache/world/world-cache\";\r\nimport { WorldInfo } from \"../cache/world/worldInfo\";\r\n\r\nexport const MapPage: React.FC<{ world: WorldInfo }> = ({ world }) => {\r\n    const { latitude = 0, longitude = 0 } = usePosition(true)\r\n    const position: any = [latitude, longitude];\r\n    const { all } = useSpaceInfo()\r\n    const markers: { coordinates: [number, number], name: string, markerOffset: number }[] = all().map(x => ({ coordinates: x.anchor.coordinates.slice(0, 2) as [number, number], name: x.name, markerOffset: -25 }));\r\n    console.log(markers);\r\n    return <>\r\n\r\n        <ComposableMap >\r\n            <Geographies geography={world.map}>\r\n                {(children: any) =>\r\n                    children.geographies.map((geo: any) => <Geography key={geo.rsmKey} geography={geo} />)\r\n                }\r\n            </Geographies>\r\n            {markers.map(({ name, coordinates, markerOffset }) => (\r\n                <Marker key={name} coordinates={coordinates}>\r\n                    <circle r={10} fill=\"#F00\" stroke=\"#fff\" strokeWidth={2} />\r\n                    <text\r\n                        textAnchor=\"middle\"\r\n                        y={markerOffset}\r\n                        style={{ fontFamily: \"system-ui\", fill: \"#5D5A6D\" }}\r\n                    >\r\n                        {name}\r\n                    </text>\r\n                </Marker>\r\n            ))}\r\n        </ComposableMap>\r\n    </>\r\n}","import { AppCard, AppContent, AppItem, AppItemDivider, AppPage, destination } from \"atomic\";\r\nimport { useParams } from \"react-router\";\r\nimport { useSpaceInfo, useWorldInfo } from \"../cache/world/world-cache\";\r\nimport { spaceRoute } from \"../routes/world-routes\";\r\nimport { MapPage } from \"./MapPage\";\r\n\r\n\r\nconst WorldPage: React.FC = () => {\r\n    const { uuid } = useParams<{ uuid: string }>()\r\n    const world = useWorldInfo(worlds => worlds.find(x => x.uuid === uuid))\r\n    const spaces = useSpaceInfo(x => x.all())\r\n    return (\r\n        <AppPage>\r\n            <AppContent center>\r\n                {world && <AppCard headerColor=\"tertiary\" title={world?.name}>\r\n                    {spaces.map(space => <AppItem\r\n                        key={space.uuid}\r\n                        routerLink={\r\n                            destination(spaceRoute, { geohash: space.anchor.geohash })\r\n                        }>\r\n                        {space.name}\r\n                    </AppItem>)}\r\n                    <AppItemDivider />\r\n                    <MapPage world={world} />\r\n                </AppCard>}\r\n            </AppContent>\r\n        </AppPage >\r\n    );\r\n};\r\n\r\nexport default WorldPage;\r\n","import { AppCard, AppItem, AppList, AppPage, AppTitle, destination } from \"atomic\";\r\nimport { useWorldInfo } from \"../cache/world/world-cache\";\r\nimport { WorldInfo } from \"../cache/world/worldInfo\";\r\nimport { worldRoute } from \"../routes/world-routes\";\r\n\r\n\r\nconst WorldsPage: React.FC = () => {\r\n    const worlds: WorldInfo[] = useWorldInfo(x => x.all())\r\n    return (\r\n        <AppPage>\r\n            <AppCard headerColor=\"light\" subTitle={\"Metaverse directory\"}>\r\n                <AppList>\r\n                    {worlds.map(({ uuid, name, }) =>\r\n                        <AppItem key={uuid} routerLink={destination(worldRoute, { uuid })}>\r\n                            <AppTitle>\r\n                                {name}\r\n                            </AppTitle>\r\n                        </AppItem>)}\r\n                </AppList>\r\n            </AppCard>\r\n        </AppPage >\r\n    );\r\n};\r\n\r\nexport default WorldsPage;\r\n","import { AppRoute } from \"atomic\";\r\nimport { SpacePage } from \"../pages/SpacePage\";\r\nimport { MintPage } from \"../pages/MintPage\";\r\nimport WorldPage from \"../pages/WorldPage\";\r\nimport WorldsPage from \"../pages/WorldsPage\";\r\nimport { globeOutline, starOutline } from \"ionicons/icons\"\r\nexport const mintRoute: AppRoute = { icon: \"\", path: \"/mint/:uuid\", title: \"\", component: MintPage, dynamic: true };\r\nexport const spaceRoute: AppRoute = { icon: starOutline, path: \"/space/:geohash\", title: \"\", component: SpacePage, dynamic: true };\r\nexport const worldRoute: AppRoute = { icon: globeOutline, path: \"/world/:uuid\", title: \"\", component: WorldPage, dynamic: true };\r\nexport const worldsRoute: AppRoute = { icon: globeOutline, path: \"/worlds/\", title: \"Worlds\", component: WorldsPage, exact: true };\r\n\r\nexport const worldRoutes: AppRoute[] = [\r\n    worldRoute,\r\n    worldsRoute,\r\n    spaceRoute,\r\n    mintRoute\r\n];","import { AppForm, AppPage } from \"atomic\"\r\nimport useTitle from \"atomic/dist/hooks/useAppTitle\"\r\nimport { useEffect } from \"react\"\r\nimport { useParams } from \"react-router\"\r\nimport { worldSchema } from \"../cache/world/schema/world-schema\"\r\nexport const MintPage: React.FC = () => {\r\n    const { id } = useParams<{ id: string }>()\r\n    const setTitle = useTitle(x => x.setTitle)\r\n    useEffect(() => {\r\n        setTitle(\"Mint \" + id);\r\n    })\r\n    return <AppPage>\r\n        <AppForm\r\n            onSubmit={(space) => {\r\n                console.log(space)\r\n            }}\r\n            rootSchema={worldSchema}\r\n            objectSchema={worldSchema.definitions.space_node}\r\n            data={{}}>\r\n        </AppForm>\r\n    </AppPage>\r\n}\r\n","import { AppRoute } from \"atomic\";\r\nimport { dashboardRoute } from \"./dashboard-route\";\r\nimport { accountRoutes } from \"./account-routes\";\r\nimport { walletRoutes } from \"./wallet-routes\";\r\nimport { worldRoutes } from \"./world-routes\";\r\nimport { inventoryRoutes } from \"./inventory-routes\";\r\n\r\nexport const routes: AppRoute[] = [dashboardRoute, ...walletRoutes, ...accountRoutes, ...worldRoutes, ...inventoryRoutes]","import { AppRoute } from \"atomic\";\r\nimport Home from \"../pages/Home\";\r\nexport const dashboardRoute: AppRoute = { icon: \"\", path: \"/\", title: \"Dashboard\", component: Home, exact: true };\r\n","import { AppContent, AppPage, AppRouteCard } from \"atomic\"\r\nimport { useWallet } from \"../hooks/useWallet\";\r\nimport { accountListRoute } from \"../routes/account-routes\";\r\nimport { inventoryListRoute } from \"../routes/inventory-routes\";\r\nimport { worldsRoute } from \"../routes/world-routes\";\r\nconst Home: React.FC = () => {\r\n  const status = useWallet(x => x.status)\r\n  return (\r\n    <AppPage>\r\n      <AppContent center>\r\n        <AppRouteCard {...worldsRoute} />\r\n        <AppRouteCard {...accountListRoute} />\r\n        {status === \"connected\" && <AppRouteCard {...inventoryListRoute} />}\r\n      </AppContent>\r\n    </AppPage>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { AppConfig } from \"atomic\";\r\nimport { cache } from \"../cache\";\r\nimport { DiscordLogin } from \"../components/discord/DiscordLogin\";\r\nimport { ConnectButton } from \"../components/wallet/ConnectButton\";\r\nimport { routes, sections } from \"../routes/\";\r\n\r\nconst Config: AppConfig =\r\n{\r\n    appId: \"worldseed\",\r\n    version: \"0.0.3\",\r\n    title: \"World Seed\",\r\n    cache,\r\n    darkMode: true,\r\n    about: \"Its a world seed\",\r\n    sections,\r\n    routes,\r\n    animated: true,\r\n    bottomBar: {\r\n        hideNext: true,\r\n        end: DiscordLogin,\r\n        start: ConnectButton\r\n    },\r\n    settings: {\r\n        disabled: true,\r\n    },\r\n    serialization: {\r\n        mode: \"local\"\r\n    }\r\n\r\n\r\n}\r\nexport default Config;","import { accountListRoute } from \"./account-routes\";\r\nimport { inventoryListRoute } from \"./inventory-routes\";\r\nimport { walletRoute } from \"./wallet-routes\";\r\nimport { worldsRoute } from \"./world-routes\";\r\n\r\nexport const sections = { \"World Seed\": [worldsRoute, accountListRoute, inventoryListRoute, walletRoute] }\r\n","import { AppButton, AppModal } from \"atomic\"\r\nimport { useState } from \"react\"\r\n\r\nexport const DiscordLogin: React.FC = () => {\r\n    const widget = <>\r\n        <iframe title=\"discord-login\" src=\"https://discord.com/widget?id=885998011258392638&theme=dark\" frameBorder={\"0\"} sandbox=\"allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts\"></iframe></>\r\n    const [showDiscord, setShowDiscord] = useState(false)\r\n    return <>\r\n        <AppButton color=\"primary\" onClick={() => {\r\n            setShowDiscord(true)\r\n        }}>\r\n            Discord\r\n\r\n        </AppButton>\r\n        <AppModal isOpen={showDiscord} children={widget} onDismiss={() => {\r\n            setShowDiscord(false)\r\n        }} />\r\n    </>\r\n}","import { AppButton } from \"atomic\"\r\nimport { useWallet } from \"../../hooks/useWallet\"\r\nimport { walletRoute } from \"../../routes/wallet-routes\"\r\n\r\nexport const ConnectButton: React.FC = () => {\r\n    const { status } = useWallet()\r\n    return < AppButton routerLink={walletRoute.path} color={status !== \"connected\" ? \"primary\" : \"favorite\"} >\r\n        {status}\r\n    </AppButton >\r\n}","import { AppRoot } from 'atomic';\r\nimport { useEffect } from \"react\";\r\nimport { useSpaceInfo, useWorldInfo } from \"./cache/world/world-cache\";\r\nimport config from \"./config\";\r\n\r\nconst App: React.FC = () => {\r\n  const insertSpace = useSpaceInfo(x => x.insert)\r\n  const insertWorld = useWorldInfo(x => x.insert)\r\n  useEffect(() => {\r\n    insertSpace(\"000\", {\r\n      description: \"Its a great HQ BBY\",\r\n      anchor: {\r\n        geohash: \"000\", coordinates: [-47, -15, 0]\r\n      },\r\n      entities: [\r\n        {\r\n          name: \"building\", description: \"\", uuid: \"asdasd\",\r\n          type: \"model\", characteristics: [\r\n            \"grabbable\",\r\n            \"ownable\"\r\n          ],\r\n          anchor: {\r\n            geohash: \"000\",\r\n            coordinates: [70, 73, 0]\r\n          },\r\n          offset: {\r\n            position: [3, 2, 0],\r\n            rotation: [0, 0, 0, 0],\r\n          },\r\n          model: \"https://telesto.world/diamond.glb\"\r\n        }],\r\n      uuid: \"12739182731827398123\",\r\n      name: \"Telesto HQ\",\r\n      type: \"space\"\r\n    })\r\n\r\n    insertWorld(\"telesto\", {\r\n      description: \"~ ~ a e s t h e t i c ~ ~\",\r\n      uuid: \"telesto\",\r\n      name: \"Telesto\",\r\n      map: \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\",\r\n      type: \"world\"\r\n    })\r\n    insertWorld(\"esperia\", {\r\n      description: \"\",\r\n      uuid: \"esperia\",\r\n      name: \"Esperia\",\r\n      map: \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\",\r\n      type: \"world\"\r\n    })\r\n\r\n  });\r\n  return <AppRoot {...config} />\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}